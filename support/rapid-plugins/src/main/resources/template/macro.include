<#assign dollar = '$'>

<#function isUseParamObject sql>
	<#if (sql.params?size <= 1)>
		<#return false/>
	</#if>
	<#if (sql.paramType = 'parameterObject' || sql.params?size >= 1000)>
		<#return true/>
	</#if>
	<#return false/>		
</#function>

<#macro generateResultClassName sql suffix=''>
	<#compress>
	<#if sql.selectSql>
		<#local resultClassName><#if sql.resultClassName==tableConfig.className>${sql.resultClassName}${suffix}<#else>${sql.resultClassName}</#if></#local>
		<#if sql.paging>
			PageList<${resultClassName}>
		<#elseif sql.multiplicity = 'one'>
			${resultClassName}
		<#else>
			List<${resultClassName}>
		</#if>
	<#else>
		<#if sql.deleteSql>
			int
		</#if>
		
		<#if sql.insertSql>
			<#if sql.paramType = 'object'>
				${tableConfig.pkColumn.javaType}
			<#else>
				int
			</#if>    
		</#if>
		
		<#if sql.updateSql>
			int
		</#if>
	</#if>
	</#compress>
</#macro>

<#macro generateOperationArguments sql>
<#compress>
	<#if sql.paramType = 'object'>
		${tableConfig.table.className}DO ${tableConfig.table.classNameFirstLower}
	<#else>
		<#if isUseParamObject(sql)>
			${sql.parameterClassName} param
		<#else>
			<#if sql.paging>
				<#list sql.params as param>${param.preferredParameterJavaType} ${param.paramName},</#list>int pageSize,int pageNum
			<#else>
				<#list sql.params as param>${param.preferredParameterJavaType} ${param.paramName} <#if param_has_next>,</#if></#list>
			</#if>
		</#if>
	</#if>
</#compress>
</#macro>






























<#-- 本文件包含一些公共的函数,本文件会被其它模板自动include -->

<#assign dollar = '$'>

<#-- 将value变成jsp el表达式,主要由于FreeMarker生成表达式不方便 -->
<#macro jspEl value>${r"${"}${value}}</#macro>

<#-- 生成java构造函数 -->
<#macro generateConstructor constructor>
	public ${constructor}() {
	}

	public ${constructor}(
	<#list table.compositeIdColumns as column>
		${column.simpleJavaType} ${column.columnNameLower}<#if column_has_next>,</#if>
	</#list>
	) {
	<#list table.compositeIdColumns as column>
		<#if column.pk>
		this.${column.columnNameLower} = ${column.columnNameLower};
		</#if>
	</#list>
	}

</#macro>


<#macro generateJavaColumns>
	<#list table.columns as column>
		<#if column.isDateTimeColumn>
	public String get${column.columnName}String() {
		return DateConvertUtils.format(get${column.columnName}(), DateConvertUtils.DATE_FORMAT);
	}

	public void set${column.columnName}String(String value) {
		set${column.columnName}(DateConvertUtils.parse(value, DateConvertUtils.DATE_FORMAT,${column.simpleJavaType}.class));
	}

		</#if>
	public void set${column.columnName}(${column.simpleJavaType} value) {
		this.${column.columnNameLower} = value;
	}

	public ${column.simpleJavaType} get${column.columnName}() {
		return this.${column.columnNameLower};
	}

	</#list>
</#macro>

<#macro generateJavaOneToMany>
	<#list table.exportedKeys.associatedTables?values as foreignKey>
	<#assign fkSqlTable = foreignKey.sqlTable>
	<#assign fkTable    = fkSqlTable.className>
	<#assign fkPojoClass = fkSqlTable.className>
	<#assign fkPojoClassVar = fkPojoClass?uncap_first>

	private Set ${fkPojoClassVar}s = new HashSet(0);
	public void set${fkPojoClass}s(Set<${fkPojoClass}> ${fkPojoClassVar}){
		this.${fkPojoClassVar}s = ${fkPojoClassVar};
	}

	public Set<${fkPojoClass}> get${fkPojoClass}s() {
		return ${fkPojoClassVar}s;
	}
	</#list>
</#macro>

<#macro generateJavaManyToOne>
	<#list table.importedKeys.associatedTables?values as foreignKey>
	<#assign fkSqlTable = foreignKey.sqlTable>
	<#assign fkTable    = fkSqlTable.className>
	<#assign fkPojoClass = fkSqlTable.className>
	<#assign fkPojoClassVar = fkPojoClass?uncap_first>

	private ${fkPojoClass} ${fkPojoClassVar};

	public void set${fkPojoClass}(${fkPojoClass} ${fkPojoClassVar}){
		this.${fkPojoClassVar} = ${fkPojoClassVar};
	}

	public ${fkPojoClass} get${fkPojoClass}() {
		return ${fkPojoClassVar};
	}
	</#list>
</#macro>